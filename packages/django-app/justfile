default:
  @just --list

projectName := 'glerk'

# create python venv and install dependencies
setup-local-python-venv:
  python3 -m venv .venv
  source .venv/bin/activate
  PIPENV_VENV_IN_PROJECT=1 pipenv install --dev --deploy

# create .env file from template
copy-env:
  cp .env.template .env

default_backups_location := "./backups"
# create backup with pgdump. must set some envars
create-pgdump location=default_backups_location:
  docker-compose exec db pg_dump -U $POSTGRES_USER $POSTGRES_DB > {{location}}/`date +%Y-%m-%d_%H-%M-%S`-{{projectName}}dump.sql
# creates a json backup of the db
create-json-backup location=default_backups_location:
  just dcp-dumpdata > {{location}}/`date +%Y-%m-%d_%H-%M-%S`-{{projectName}}dump.json

# pulls latest code, builds web image, migrates db, restarts web container
update-glerk:
  git pull origin main
  docker-compose build web
  ./bin/dcp-django-admin.sh migrate
  docker-compose stop web
  docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d web

# create volumes, build images
init-dcp:
  docker volume create --name={{projectName}}_postgres
  docker-compose build
  docker-compose up -d db
  ./bin/wait-for-it.sh localhost:5432 -- echo "db is up"

# create django admin superuser
create-superuser:
  ./bin/dcp-django-admin.sh createsuperuser

# generate a secret key for pg crypto library
generate-pg-crypto-secret-key:
  # generate random 32 digit lowercase string
  openssl rand -hex 16

# cleanup all dcp stuff
dcp-cleanup:
  docker-compose stop
  docker-compose rm -f db web
  docker volume rm {{projectName}}_postgres

# creates docker volume for postgres data
d-create-volumes:
  docker volume create --name={{projectName}}_postgres

# build web image
dcp-build-web:
  docker-compose build web

# build db image
dcp-build-db:
  docker-compose build db

# build web and db images
dcp-build-images: dcp-build-web dcp-build-db

# run web and db containers
dcp-up-all:
  docker-compose up -d

# stop web and db containers
dcp-stop-all:
  docker-compose stop

# migrate db
dcp-migrate:
  ./bin/dcp-django-admin.sh migrate

# dump data from the db container
dcp-dumpdata:
  ./bin/dcp-django-admin.sh dumpdata \
  --natural-primary \
  --natural-foreign \
  --exclude=admin.logentry \
  --exclude=sessions.session \
  --indent 4

# loads dev data into db
dcp-load-dev-data:
  ./bin/dcp-django-admin.sh loaddata dev_data.json

# run tests, excluding integration tests
dcp-run-tests:
  docker-compose run --rm -w /code/app web \
    pytest -m "not integration" --cov=. --verbose

# generate a secret key for django
dcp-generate-secret-key:
  docker-compose run --rm -w /code/app web \
    python -c \
    'from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())'

# run shell commands in web container
dcp-run *ARGS:
  docker-compose run --rm web {{ARGS}}

# execute shell commands in running web container
dcp-exec *ARGS:
  docker-compose exec web {{ARGS}}

# run django admin command in web container
django-admin *ARGS:
  #! /bin/bash
  # proxy to execute `manage.py` (django-admin) commands in web container

  function checkenv() {
    # get db host envar from docker container
    DB_HOST_ENVAR=$(docker-compose run --rm -w /code/app web env | grep POSTGRES_HOST)
    DB_HOST=$(cut -d "=" -f2 <<< "$DB_HOST_ENVAR")
    # bashism to trim newline
    DB_HOST=${DB_HOST//[$'\t\r\n']}
    if [ "$DB_HOST" != 'db' ] && [ "$DB_HOST" != '0.0.0.0' ] && [ "$DB_HOST" != 'localhost' ]
    then
      echo "You are running this command against the database at ${DB_HOST}!"
      checkconfidence
    else
      echo "Running command against database at $DB_HOST..."
    fi
  }

  function checkconfidence() {
    read -r -p "Are you sure you want to continue? [y/N] " response
    if [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]
    then
      return
    else
      exit
    fi
  }

  # check env and user's confidence if we are not using local database
  checkenv
  docker-compose run --rm -w /code/app web /code/app/manage.py {{ARGS}}

# generate django admin file for the given app
generate-admin app:
  docker-compose run --rm -w /code/app web /code/app/manage.py admin_generator {{app}} > app/{{app}}/admin_1.py

reload-docker-db *ARGS:
  ./utils/reload-docker-db.sh {{ARGS}}
